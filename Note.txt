Venerdì 11/05/2018 - Provati modulini NRF24L01 con due sketch Arduino presi da internet.
Sul lato ricevitore, problemi con una funzione di ricezione che nella nuova libreria RF24 è stata cambiata.

Lunedì 27/08/2018
- Provato modulino SIM800L con alimentazione a 4.2V fornita da scheda XL4015. Ha funzionato bene per tutto il tempo, ovvero circa 3h di prove. Abbiamo quindi risolto il problema del reset continuo e di malfunzionamenti che si erano registrati usando la scheda originale con due diodi per passare da 5V a 4.2V.
- Provati i comandi:
	AT			per iniziare la comunicazione con il modulino grazie all'auto baud rate
	AT+CGMM 	Nome del modulo
	AT+CGMR		Codice del modulo
	AT+CPIN?	sapere se è richesto il PIN
	AT+CNUM		numero di telefono della SIM
	AT+CSQ		signal quality (risposta: 10 senza antenna, 26 con antenna)
	AT+CMGF=1	text mode, necessaria per leggere/inviare SMS
	AT+CMGS="+39........" INVIO >messaggio CTRL-Z 	per inviare SMS
	AT+CMGL="ALL"	legge tutti gli SMS
tutti hanno dato esito positivo, utilizzando un convertitore USB-seriale e il software PUTTY con comunicazione COM4 115200.

- Prova con ARDUINO e sketch seguente:
		#include <SoftwareSerial.h>

		String Arsp, Grsp;
		SoftwareSerial gsm(10, 11); // RX, TX (on Arduino side)

		void setup() {
		  // put your setup code here, to run once:

		  Serial.begin(9600);
		  Serial.println("Testing GSM SIM800L");
		  gsm.begin(4800);

		}

		void loop() {
		  // put your main code here, to run repeatedly:

		  if(gsm.available())
		  {
			Grsp = gsm.readString();
			Serial.println(Grsp);
		  }

		  if(Serial.available())
		  {
			Arsp = Serial.readString();
			gsm.println(Arsp);
		  }

		}

si è rivelata fallimentare in quanto molto lenta. Inoltre la lettura di tutti i messaggi non si conclude del tutto (forse a causa della software serial che ha un buffer troppo limitato). La VDD del SIM800L (lato seriale) era attaccata ai 3.3V di ARDUINO. Anche con 5V funziona male.

Abbiamo provato a 4800baud con putty e funziona benissimo.
	AT+CMGL="REC UNREAD"	legge tutti gli SMS non ancora letti

Abbiamo provato con la libreria NeoSwSerial al posto di SoftwareSerial ma non abbiamo ottenuto il miglioramento atteso. Ci siamo resi conto che quando si chiede la lettura di tutti i messaggi si superano gli 1.7kB rimanenti di memoria RAM di ARDUINO.
Link utile per comparazione software serial: https://arduino.stackexchange.com/questions/26240/which-pins-of-an-arduino-uno-can-be-used-as-tx-and-rx-pins-for-connecting-to-gsm#26277

Altri comandi provati: 
	AT+CLTS=1;&W abilita il servizio di orologio dalla rete e con l'opzione &W ne fa un settaggio permanente del modem (anche dopo reset HW resta)
	AT+CFUN=1,1		resetta il modulo via software
	AT+CLTS?		controlla se il clock via rete è attivo
	AT+CCLK?		restituisce ora corrente
Link di riferimento: https://elementztechblog.wordpress.com/2016/12/28/getting-time-and-date-from-gsm-modem/
	
Ora,quindi, è sufficiente AT+CCLK?	per ottenere l'ora corrente dalla rete.

2018.10.24 
Siamo riusciti a far funzionare il firmware: avviene una comunicazione bidirezionale tra PC-STM32-SIM800L basata su UART in interrupt mode e buffer circolare per la ricezione; aggiunte callback alla fine della trasmissione.
Pare funzionare ma resta da gestire l'eventualità di errori nella comunicazione, che con l'attuale error handler non vengono resettati opportunamente.
Ci siamo accorti che se l'antenna del SIM800L è vicina ai collegamenti con STM32, si ha sempre FE durante la ricezione di chiamate o SMS, che per il suddetto motivo manda in palla il sistema.

2018.11.06
Stiamo provando ad utilizzare un modulino NRF24L01 con STM32. Abbiamo problemi con la sequenza di power up, dove viene scritto un registro ma poi, alla rilettura, non risulta settato correttamente.
Abbiamo capito che ogni NRF24L01 consente di cambiare canale (quindi frequenza, attorno ai 2.4GHz, grazie ad un registro RF_CH) e sullo stesso canale è possibile assegnare vari indirizzi. Non abbiamo ben capito cosa siano le "pipe".
Stiamo provando a usare: https://github.com/r2aiv/NRF24L01-1

2018.11.08
Stiamo leggendo il datasheet e siamo arrivati a pagina 29/75.

2018.11.13
Continuamo a leggere datasheet NRF24L01 da pag. 29/75. Siamo arrivati a pag. 41, ancora da leggere.

2018.11.15
Continuamo a leggere datasheet NRF24L01	da pag. 41/75. Finita lettura. Iniziamo SPI su Carmine Noviello.

2018.11.17
Riprendiamo a leggere SPI su Carmine Noviello.

2018.11.18
NRF24 con STM32 funziona!

TA = Terminal Adapter: motori del GSM; il nostro tx/rx SIM800L
TE = Terminal Equipment: chi controlla i motori GSM scambiando comandi AT

	
Risposte del SIM800L:
	+CMTI: "ME",23 --> +CMTI: <mem3>,<index> --> "ME" vuol dire che i messaggi ricevuti vanno nel "phone message storage", mentre l'indexè l'indice dell'SMS nella memoria (Verificare quest'ultima cosa)
	
Leggendo su https://www.treccarichi.net/2016/06/sim800l/ abbiamo trovato comando per sapere subito il testo del messaggio ricevuto e il numero di telefono. Il comando per impostare questa modalità è:
	AT+CNMI=1,2,0,0,0
	
Dopo questo comando il messaggio tipo è:
	+CMT: "+393803415931","","18/11/18,17:29:54+04"
	Come butta dopo il CNMI?
inoltre il messaggio non viene salvato.
	
2018.11.20
Abbiamo provato il parser con il PC e PuTTY e funziona!
Ora anche con SIM800L dopo comandi:
AT+CMGF=1
AT+CNMI=1,2,0,0,0

Abbiamo provato questa configurazione:

SIM800 <---------> STM32
			|
			|
			|----> PC




